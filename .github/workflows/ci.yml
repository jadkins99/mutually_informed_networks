name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

# Prevent overlapping runs on the same ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    # --- EXTRA #3: PostgreSQL service for integration tests ---
    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: ci
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U ci -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      # Your app/tests can use this (adjust if your code expects a different var)
      DATABASE_URL: postgresql://ci:ci@127.0.0.1:5432/testdb
      # Make pytest non-interactive
      PYTHONWARNINGS: default

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install project & test deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            python - <<'PY'
import tomllib, sys, subprocess, pathlib
p = pathlib.Path("pyproject.toml")
data = tomllib.loads(p.read_text())
proj = data.get("project", {})
extras = set(proj.get("optional-dependencies", {}).keys())
if {"dev","test"} <= extras:
    subprocess.check_call([sys.executable,"-m","pip","install","-e",".[dev,test]"])
elif "dev" in extras:
    subprocess.check_call([sys.executable,"-m","pip","install","-e",".[dev]"])
elif "test" in extras:
    subprocess.check_call([sys.executable,"-m","pip","install","-e",".[test]"])
else:
    subprocess.check_call([sys.executable,"-m","pip","install","-e","."])
PY
          else
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
            pip install -e .
          fi
          pip install pytest pytest-cov

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U ci -d testdb; then
              echo "Postgres is ready"; break
            fi
            echo "Waiting for Postgres... ($i)"; sleep 2
          done

      - name: Run tests
        run: |
          pytest

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: warn

  # --- EXTRA #2: Pre-commit lint job ---
  lint:
    name: Lint (pre-commit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install pre-commit and linters
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          # Speed-up: install hook deps declared in .pre-commit-config.yaml
          pre-commit install-hooks
      - name: Run pre-commit
        run: pre-commit run --all-files
