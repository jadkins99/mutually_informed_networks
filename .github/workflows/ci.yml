name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -------- Unit tests (no DB) --------
  tests:
    name: Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    if: ${{ hashFiles('mutually_informed_networks/src/lib_mutual_information/tests/**', '!mutually_informed_networks/src/lib_mutual_information/tests/integration/**') != '' }}

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install project & test deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            python - <<'PY'
            import sys, subprocess, pathlib
            try:
                import tomllib  # 3.11+
            except ModuleNotFoundError:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "tomli"])
                import tomli as tomllib
            data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
            extras = set(data.get("project", {}).get("optional-dependencies", {}).keys())
            if {"dev","test"} <= extras:
                subprocess.check_call([sys.executable,"-m","pip","install","-e",".[dev,test]"])
            elif "dev" in extras:
                subprocess.check_call([sys.executable,"-m","pip","install","-e",".[dev]"])
            elif "test" in extras:
                subprocess.check_call([sys.executable,"-m","pip","install","-e",".[test]"])
            else:
                subprocess.check_call([sys.executable,"-m","pip","install","-e","."])
            PY
          else
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
            pip install -e .
          fi
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            mutually_informed_networks/src/lib_mutual_information/tests \
            --cov=. --cov-report=term-missing --cov-report=xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: warn

  # -------- Integration tests (with Postgres) --------
  tests-with-db:
    name: Integration Tests w/ Postgres (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    if: ${{ hashFiles('mutually_informed_networks/src/lib_mutual_information/tests/integration/**') != '' }}

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: ci
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U ci -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      DATABASE_URL: postgresql://ci:ci@127.0.0.1:5432/testdb

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install project & test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            python - <<'PY'
            import sys, subprocess, pathlib
            try:
                import tomllib
            except ModuleNotFoundError:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "tomli"])
                import tomli as tomllib
            data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
            extras = set(data.get("project", {}).get("optional-dependencies", {}).keys())
            if {"dev","test"} <= extras:
                subprocess.check_call([sys.executable,"-m","pip","install","-e",".[dev,test]"])
            elif "dev" in extras:
                subprocess.check_call([sys.executable,"-m","pip","install","-e",".[dev]"])
            elif "test" in extras:
                subprocess.check_call([sys.executable,"-m","pip","install","-e",".[test]"])
            else:
                subprocess.check_call([sys.executable,"-m","pip","install","-e","."])
            PY
          else
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
            pip install -e .
          fi
          pip install pytest pytest-cov psycopg2-binary

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U ci -d testdb; then
              echo "Postgres is ready"; break
            fi
            echo "Waiting for Postgres... ($i)"; sleep 2
          done

      - name: Run integration tests
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            mutually_informed_networks/src/lib_mutual_information/tests/integration \
            --cov=. --cov-report=term-missing --cov-report=xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: warn

  # -------- Lint (only if config exists) --------
  lint:
    name: Lint (pre-commit)
    runs-on: ubuntu-latest
    if: ${{ hashFiles('.pre-commit-config.yaml') != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install pre-commit and hook deps
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install-hooks
      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure --color always
